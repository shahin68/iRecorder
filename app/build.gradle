plugins {
    id('com.android.application')
    id('kotlin-android')
    id('kotlin-kapt')
    id('kotlin-parcelize')
    id('dagger.hilt.android.plugin')
    id('androidx.navigation.safeargs.kotlin')
}

static def getDate() {
    return new Date().format('yyyy-MM-dd')
}

def versionMajor = 0 // major milestones
def versionMinor = 0 // minor patches & bug fixes
def versionBuild = 1 // build number
android {
    compileSdk 30

    defaultConfig {
        applicationId "com.itranslate.recorder"
        minSdk 23
        targetSdk 30
        versionCode versionMajor * 1000 + versionMinor * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionBuild}"

        setProperty("archivesBaseName", "iRecorder" + "-v" + versionName + "-" + getDate())

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix '-debug'
            applicationIdSuffix '.debug'
        }
        release {
            minifyEnabled true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix '-release'
            applicationIdSuffix '.release'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }
    kapt {
        correctErrorTypes true
        javacOptions {
            option("-Adagger.hilt.android.internal.disableAndroidSuperclassValidation=true")
        }
    }
    packagingOptions {
        /*After adding androidx.arch.core:core-testing instrumented test build failed with error
        * that there are two instances of META-INF/AL2.0 & META-INF/LGPL2.1 in two packages. And,
        * excluding META-INF/AL2.0 & META-INF/LGPL2.1 in packaging options will resolve the issue
        * temporarily*/
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
    }
}

final COROUTINES = '1.4.3'
final NAVIGATION = '2.3.5'
final LIFECYCLE = '2.3.1'
final HILT = '2.38.1'
final PAGING = '3.0.1'
final ROOM = '2.3.0'
final TRUTH = '1.1'

dependencies {
    // Kotlin core
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.5.20"
    implementation 'androidx.core:core-ktx:1.5.0'

    // UI components
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'

    // Kotlin Coroutines full
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$COROUTINES")

    // Jetpack Navigation ui components
    implementation("androidx.navigation:navigation-ui-ktx:$NAVIGATION")
    implementation("androidx.navigation:navigation-fragment-ktx:$NAVIGATION")

    // Jetpack Lifecycle extensions
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$LIFECYCLE")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$LIFECYCLE")

    // Jetpack Hilt dependency injection
    implementation("com.google.dagger:hilt-android:$HILT")
    kapt("com.google.dagger:hilt-compiler:$HILT")

    // Jetpack paging llibrary
    implementation("androidx.paging:paging-runtime-ktx:$PAGING")

    // Jetpack room persistent data backed by a SQLite database
    implementation("androidx.room:room-ktx:$ROOM")
    kapt("androidx.room:room-compiler:$ROOM")

    // Unit tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation('androidx.test.ext:junit:1.1.3')
    testImplementation("com.google.truth:truth:$TRUTH") // truth
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$COROUTINES") // coroutines test tools
    testImplementation('androidx.arch.core:core-testing:2.1.0') // architectural test tools
    testImplementation('org.mockito:mockito-android:3.2.4') // mockito tools
    testImplementation("com.google.dagger:hilt-android-testing:$HILT") // hilt test tools
    kaptTest("com.google.dagger:hilt-android-compiler:$HILT") // hilt test kotlin compiler

    // Instrumented tests
    androidTestImplementation('androidx.test.ext:junit:1.1.3')
    androidTestImplementation('androidx.test:rules:1.4.1-alpha01') // test tules
    androidTestImplementation('androidx.test.espresso:espresso-core:3.5.0-alpha01') // espresso
    androidTestImplementation("com.google.truth:truth:$TRUTH") // truth
    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$COROUTINES") // coroutines test tools
    androidTestImplementation('androidx.arch.core:core-testing:2.1.0') // architectural test tools
    androidTestImplementation('org.mockito:mockito-android:3.2.4') // mockito tools
    androidTestImplementation("com.google.dagger:hilt-android-testing:$HILT") // hilt test tools
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:$HILT") // hilt test kotlin compiler
    debugImplementation('androidx.fragment:fragment-testing:1.3.6') // fragment test scenario
    androidTestImplementation('androidx.navigation:navigation-testing:2.3.5') // test navigation
    androidTestImplementation("org.robolectric:robolectric:4.6.1") // robolectrics
}